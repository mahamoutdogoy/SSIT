{"ast":null,"code":"import _defineProperty from \"/Users/dogoy/ANAVATECH/project/aa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/dogoy/ANAVATECH/project/aa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { ColorBlock } from '@rc-component/color-picker';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport React, { useMemo } from 'react';\nimport Collapse from '../../collapse';\nimport { useLocale } from '../../locale';\nimport { generateColor } from '../util';\nvar Panel = Collapse.Panel;\nvar genPresetColor = function genPresetColor(list) {\n  return list.map(function (value) {\n    value.colors = value.colors.map(generateColor);\n    return value;\n  });\n};\nvar isBright = function isBright(value) {\n  var _value$toRgb = value.toRgb(),\n    r = _value$toRgb.r,\n    g = _value$toRgb.g,\n    b = _value$toRgb.b,\n    a = _value$toRgb.a;\n  if (a <= 0.5) {\n    return true;\n  }\n  return r * 0.299 + g * 0.587 + b * 0.114 > 192;\n};\nvar ColorPresets = function ColorPresets(_ref) {\n  var prefixCls = _ref.prefixCls,\n    presets = _ref.presets,\n    color = _ref.value,\n    onChange = _ref.onChange;\n  var _useLocale = useLocale('ColorPicker'),\n    _useLocale2 = _slicedToArray(_useLocale, 1),\n    locale = _useLocale2[0];\n  var _useMergedState = useMergedState(genPresetColor(presets), {\n      value: genPresetColor(presets),\n      postState: genPresetColor\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 1),\n    presetsValue = _useMergedState2[0];\n  var colorPresetsPrefixCls = \"\".concat(prefixCls, \"-presets\");\n  var activeKeys = useMemo(function () {\n    return presetsValue.map(function (preset) {\n      return \"panel-\".concat(preset.label);\n    });\n  }, [presetsValue]);\n  var handleClick = function handleClick(colorValue) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(colorValue);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: colorPresetsPrefixCls\n  }, /*#__PURE__*/React.createElement(Collapse, {\n    defaultActiveKey: activeKeys,\n    ghost: true\n  }, presetsValue.map(function (preset) {\n    var _a;\n    return /*#__PURE__*/React.createElement(Panel, {\n      header: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(colorPresetsPrefixCls, \"-label\")\n      }, preset === null || preset === void 0 ? void 0 : preset.label),\n      key: \"panel-\".concat(preset === null || preset === void 0 ? void 0 : preset.label)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(colorPresetsPrefixCls, \"-items\")\n    }, Array.isArray(preset === null || preset === void 0 ? void 0 : preset.colors) && ((_a = preset.colors) === null || _a === void 0 ? void 0 : _a.length) > 0 ? preset.colors.map(function (presetColor) {\n      var _classNames;\n      return /*#__PURE__*/React.createElement(ColorBlock, {\n        key: \"preset-\".concat(presetColor.toHexString()),\n        color: generateColor(presetColor).toRgbString(),\n        prefixCls: prefixCls,\n        className: classNames(\"\".concat(colorPresetsPrefixCls, \"-color\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(colorPresetsPrefixCls, \"-color-checked\"), presetColor.toHexString() === (color === null || color === void 0 ? void 0 : color.toHexString())), _defineProperty(_classNames, \"\".concat(colorPresetsPrefixCls, \"-color-bright\"), isBright(presetColor)), _classNames)),\n        onClick: function onClick() {\n          return handleClick(presetColor);\n        }\n      });\n    }) : /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(colorPresetsPrefixCls, \"-empty\")\n    }, locale.presetEmpty)));\n  })));\n};\nexport default ColorPresets;","map":null,"metadata":{},"sourceType":"module"}