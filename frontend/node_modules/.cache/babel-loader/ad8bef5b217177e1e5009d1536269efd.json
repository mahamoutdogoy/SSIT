{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport RcColorPicker from '@rc-component/color-picker';\nimport React from 'react';\nimport Divider from '../divider';\nimport ColorClear from './components/ColorClear';\nimport ColorInput from './components/ColorInput';\nimport ColorPresets from './components/ColorPresets';\nvar ColorPickerPanel = function ColorPickerPanel(props) {\n  var prefixCls = props.prefixCls,\n    allowClear = props.allowClear,\n    presets = props.presets,\n    _onChange = props.onChange,\n    onClear = props.onClear,\n    onChangeComplete = props.onChangeComplete,\n    color = props.color,\n    injectProps = __rest(props, [\"prefixCls\", \"allowClear\", \"presets\", \"onChange\", \"onClear\", \"onChangeComplete\", \"color\"]);\n  var colorPickerPanelPrefixCls = \"\".concat(prefixCls, \"-inner-panel\");\n  var extraPanelRender = function extraPanelRender(panel) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: colorPickerPanelPrefixCls\n    }, allowClear && /*#__PURE__*/React.createElement(ColorClear, Object.assign({\n      prefixCls: prefixCls,\n      value: color,\n      onChange: function onChange(clearColor) {\n        _onChange === null || _onChange === void 0 ? void 0 : _onChange(clearColor);\n        onClear === null || onClear === void 0 ? void 0 : onClear(true);\n      }\n    }, injectProps)), panel, /*#__PURE__*/React.createElement(ColorInput, Object.assign({\n      value: color,\n      onChange: _onChange,\n      prefixCls: prefixCls\n    }, injectProps)), Array.isArray(presets) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n      className: \"\".concat(colorPickerPanelPrefixCls, \"-divider\")\n    }), /*#__PURE__*/React.createElement(ColorPresets, {\n      value: color,\n      presets: presets,\n      prefixCls: prefixCls,\n      onChange: _onChange\n    })));\n  };\n  return /*#__PURE__*/React.createElement(RcColorPicker, {\n    prefixCls: prefixCls,\n    value: color === null || color === void 0 ? void 0 : color.toHsb(),\n    onChange: function onChange(colorValue, type) {\n      return _onChange === null || _onChange === void 0 ? void 0 : _onChange(colorValue, type, true);\n    },\n    panelRender: extraPanelRender,\n    onChangeComplete: onChangeComplete\n  });\n};\nif (process.env.NODE_ENV !== 'production') {\n  ColorPickerPanel.displayName = 'ColorPickerPanel';\n}\nexport default ColorPickerPanel;","map":null,"metadata":{},"sourceType":"module"}