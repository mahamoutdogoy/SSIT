{"ast":null,"code":"import _slicedToArray from \"/Users/dogoy/ANAVATECH/project/aa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { generateColor, getAlphaColor } from '../util';\nimport ColorSteppers from './ColorSteppers';\nvar ColorAlphaInput = function ColorAlphaInput(_ref) {\n  var prefixCls = _ref.prefixCls,\n    value = _ref.value,\n    onChange = _ref.onChange;\n  var colorAlphaInputPrefixCls = \"\".concat(prefixCls, \"-alpha-input\");\n  var _useState = useState(generateColor(value || '#000')),\n    _useState2 = _slicedToArray(_useState, 2),\n    alphaValue = _useState2[0],\n    setAlphaValue = _useState2[1]; // Update step value\n  useEffect(function () {\n    if (value) {\n      setAlphaValue(value);\n    }\n  }, [value]);\n  var handleAlphaChange = function handleAlphaChange(step) {\n    var hsba = alphaValue.toHsb();\n    hsba.a = (step || 0) / 100;\n    var genColor = generateColor(hsba);\n    if (!value) {\n      setAlphaValue(genColor);\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n  return /*#__PURE__*/React.createElement(ColorSteppers, {\n    value: getAlphaColor(alphaValue),\n    prefixCls: prefixCls,\n    formatter: function formatter(step) {\n      return \"\".concat(step, \"%\");\n    },\n    className: colorAlphaInputPrefixCls,\n    onChange: handleAlphaChange\n  });\n};\nexport default ColorAlphaInput;","map":null,"metadata":{},"sourceType":"module"}